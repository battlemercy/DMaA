ТЕОРЕТИЧЕСКИЕ СВЕДЕНИЯ

Хранимые процедуры позволяют ограничить доступ к данным в таблицах и тем самым уменьшить вероятность преднамеренных или нежелательных действий в отношении этих данных.

Хранимые процедуры обычно выполняются быстрее, чем обычные SQL-инструкции, так как код процедур компилируется один раз при первом ее запуске, а затем сохраняется в скомпилированной форме.

Создание процедуры

Для создания хранимой процедуры применяется команда 

CREATE PROCEDURE <имя процедуры>
или 
CREATE PROC <имя процедуры>

Поскольку команда CREATE PROCEDURE должна вызываться в отдельном пакете, то после команды USE, которая устанавливает текущую базу данных, используется команда GO для определения нового пакета.

После имени процедуры должно идти ключевое слово AS.

Для отделения тела процедуры от остальной части скрипта код процедуры нередко помещается в блок BEGIN...END:

Пример 1:

USE Shopdb;
GO
CREATE PROCEDURE ProductSummary AS
BEGIN
    SELECT ProductName AS Product, Manufacturer, Price
    FROM Products
END;

После добавления процедуры  ее можно увидеть в узле базы данных в SQL Server Management Studio в подузле Programmability -> Stored Procedures.

Выполнение процедуры

Для выполнения хранимой процедуры вызывается команда

EXEC <имя процедуры>;
или
EXECUTE <имя процедуры>;

Удаление процедуры

Для удаления процедуры применяется команда

DROP PROCEDURE  <имя процедуры>;

Параметры в процедурах

Процедуры могут принимать параметры. Параметры бывают:

входными - с их помощью в процедуру можно передать некоторые значения;
выходными -  позволяют возвратить из процедуры некоторое значение.
Список входных параметров перечисляется после названия процедуры. Параметры определяются также, как и переменные - название начинается с символа @, а после названия указывается тип.

Пример 2: Процедура, позволяющая добавить данные в таблицу

USE Shopdb;
GO
CREATE PROCEDURE AddProduct
    @name NVARCHAR(20),
    @manufacturer NVARCHAR(20),
    @count INT,
    @price MONEY
AS
INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price)
VALUES(@name, @manufacturer, @count, @price)

Пример 3. Использование процедуры

USE Shopdb;
DECLARE @prodName NVARCHAR(20), @company NVARCHAR(20);
DECLARE @prodCount INT, @price MONEY
SET @prodName = 'Galaxy C7'
SET @company = 'Samsung'
SET @price = 22000
SET @prodCount = 5 

EXEC AddProduct @prodName, @company, @prodCount, @price 

SELECT * FROM Product

 Примечание:

1.Также можно передавать непосредственно значения:

EXEC AddProduct 'Galaxy C7', 'Samsung', 5, 22000

2.Также значения параметрам процедуры можно передавать по имени:

 

 

 

 

 

 

 

 

USE Shopdb;
DECLARE @prodName NVARCHAR(20), @company NVARCHAR(20);
SET @prodName = 'Honor 9'
SET @company = 'Huawei' 

EXEC AddProduct @name = @prodName,
                @manufacturer=@company,
                @count = 3,
                @price = 18000

При передаче параметров по имени параметру процедуры присваивается некоторое значение.

Необязательные параметр
Параметры можно отмечать как необязательные, присваивая им некоторое значение по умолчанию. При этом необязательные параметры лучше помещать в конце списка параметров процедуры.

Пример 4. Процедура, позволяющая добавлять данные в таблицу Products, при этом устанавливать для количества товара значение 1, если соответствующее значение не передано в процедуру

USE Shopdb;
GO
CREATE PROCEDURE AddProductWithOptionalCount
    @name NVARCHAR(20),
    @manufacturer NVARCHAR(20),
    @price MONEY,
    @count INT = 1
AS

INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price)
VALUES(@name, @manufacturer, @count, @price)

 

Пример 5. Вызов процедуры

DECLARE @prodName NVARCHAR(20), @company NVARCHAR(20), @price MONEY
SET @prodName = 'Redmi Note 5A'
SET @company = 'Xiaomi'
SET @price = 22000 

EXEC AddProductWithOptionalCount @prodName, @company, @price 

SELECT * FROM Products

ПРАКТИЧЕСКИЕ ЗАДАНИЯ

1. Ознакомиться с теоретическими сведениями, представленными в задании.

2. Создать хранимые процедуры из примеров 1, 2, 4. Показать их наличие в SQL Server Management Studio 

3. Выполнить созданные процедуры (пример 1, 3, 5). Продемонстрировать результат.

4. Оформить в виде процедуры следующие запросы:

Определить были ли заказы за последние 10 дней.
Посчитать количество заказов и общую вырученную сумму.
    Продемонстрировать их наличие в SQL Server Management Studio.
    Выполнить и показать результат. 

5. Написать хранимую процедуру, позволяющую вывести список товаров со стоимостью ниже среднего. Продемонстрировать результат

6.  Код всех созданных хранимых процедур отправить на проверку.